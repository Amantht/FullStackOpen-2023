{"ast":null,"code":"var _jsxFileName = \"/Users/devchaudhary/Downloads/FullStackOpen-2022-main/part8/library-frontend/src/components/BookForm.js\";\nimport React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { ALL_AUTHORS, ALL_BOOKS, CREATE_BOOK } from '../queries';\n\nconst BookForm = ({\n  show,\n  notify\n}) => {\n  const [title, setTitle] = useState('');\n  const [author, setAuhtor] = useState('');\n  const [published, setPublished] = useState(null);\n  const [genre, setGenre] = useState('');\n  const [genres, setGenres] = useState([]);\n  const [createBook] = useMutation(CREATE_BOOK, {\n    refetchQueries: [{\n      query: ALL_BOOKS\n    }, {\n      query: ALL_AUTHORS\n    }],\n    onError: error => {\n      notify(error.graphQLErrors[0].message);\n    }\n  });\n\n  if (!show) {\n    return null;\n  }\n\n  const submit = async event => {\n    event.preventDefault();\n    console.log('add book...');\n    createBook({\n      variables: {\n        title,\n        author,\n        published,\n        genres\n      }\n    });\n    setTitle('');\n    setPublished('');\n    setAuhtor('');\n    setGenres([]);\n    setGenre('');\n  };\n\n  const addGenre = () => {\n    setGenres(genres.concat(genre));\n    setGenre('');\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: submit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"title\", React.createElement(\"input\", {\n    value: title,\n    onChange: ({\n      target\n    }) => setTitle(target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \"author\", React.createElement(\"input\", {\n    value: author,\n    onChange: ({\n      target\n    }) => setAuhtor(target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"published\", React.createElement(\"input\", {\n    type: \"number\",\n    value: published,\n    onChange: ({\n      target\n    }) => setPublished(parseInt(target.value)),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    value: genre,\n    onChange: ({\n      target\n    }) => setGenre(target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: addGenre,\n    type: \"button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, \"add genre\")), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"genres: \", genres.join(' ')), React.createElement(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"create book\")));\n};\n\nexport default BookForm;","map":{"version":3,"sources":["/Users/devchaudhary/Downloads/FullStackOpen-2022-main/part8/library-frontend/src/components/BookForm.js"],"names":["React","useState","useMutation","ALL_AUTHORS","ALL_BOOKS","CREATE_BOOK","BookForm","show","notify","title","setTitle","author","setAuhtor","published","setPublished","genre","setGenre","genres","setGenres","createBook","refetchQueries","query","onError","error","graphQLErrors","message","submit","event","preventDefault","console","log","variables","addGenre","concat","target","value","parseInt","join"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { useMutation } from '@apollo/client'\nimport { ALL_AUTHORS, ALL_BOOKS, CREATE_BOOK } from '../queries'\n\nconst BookForm = ({show, notify}) => {\n  const [title, setTitle] = useState('')\n  const [author, setAuhtor] = useState('')\n  const [published, setPublished] = useState(null)\n  const [genre, setGenre] = useState('')\n  const [genres, setGenres] = useState([])\n\n  const [ createBook ] = useMutation(CREATE_BOOK, {\n    refetchQueries: [ \n      { query: ALL_BOOKS }, \n      { query: ALL_AUTHORS } \n    ],\n    onError: (error) => {      \n      notify(error.graphQLErrors[0].message)    \n    }\n  })\n  \n  if (!show) {\n    return null\n  }\n\n  const submit = async (event) => {\n    event.preventDefault()\n    \n    console.log('add book...')\n    createBook({  variables: { title, author, published, genres } })\n\n    setTitle('')\n    setPublished('')\n    setAuhtor('')\n    setGenres([])\n    setGenre('')\n  }\n\n  const addGenre = () => {\n    setGenres(genres.concat(genre))\n    setGenre('')\n  }\n\n  return (\n    <div>\n      <form onSubmit={submit}>\n        <div>\n          title\n          <input\n            value={title}\n            onChange={({ target }) => setTitle(target.value)}\n          />\n        </div>\n        <div>\n          author\n          <input\n            value={author}\n            onChange={({ target }) => setAuhtor(target.value)}\n          />\n        </div>\n        <div>\n          published\n          <input\n            type='number'\n            value={published}\n            onChange={({ target }) => setPublished(parseInt(target.value))}\n          />\n        </div>\n        <div>\n          <input\n            value={genre}\n            onChange={({ target }) => setGenre(target.value)}\n          />\n          <button onClick={addGenre} type=\"button\">add genre</button>\n        </div>\n        <div>\n          genres: {genres.join(' ')}\n        </div>\n        <button type='submit'>create book</button>\n      </form>\n    </div>\n  )\n}\n\nexport default BookForm"]},"metadata":{},"sourceType":"module"}